// Test for Single-Dimensional Arrays
double[] singleDimArray = new double[5];
singleDimArray[0] = 1.1;
singleDimArray[1] = 2.2;
singleDimArray[2] = 3.3;
singleDimArray[3] = 4.4;
singleDimArray[4] = 5.5;
printd(singleDimArray[0]);

prints("Starting 2D Array Tests.");

// Declaration of a double-dimensional array
double[,] doubleDimArray = new double[5, 5]; // 5x5 matrix of doubles

// Accessing elements
doubleDimArray[0, 0] = 1.23;
value = doubleDimArray[0, 0];
printd(value);

// Test for Double-Dimensional Arrays
double[,] doubleDimArray = new double[3, 3];
doubleDimArray[0, 0] = 1.1;
doubleDimArray[1, 1] = 2.2;
doubleDimArray[2, 2] = 3.3;
value = doubleDimArray[0, 0] + doubleDimArray[2, 2];
printd(value);

prints("2D Array Tests Complete.");

// Test for Dynamic Resizing
DynamicArray<double> dynamicArray = new DynamicArray<double>();
dynamicArray.Add(1.1);
dynamicArray.Add(2.2);
dynamicArray.Resize(5);
dynamicArray[3] = 4.4;
printd(dynamicArray[1]);

prints("resize Array Tests Complete.");

// Test for Array Slicing (Single-Dimensional)
double[] slice1D = singleDimArray.Slice(1, 3);
printd(slice1D[0]);
printd(slice1D[1]);

// Test for Array Slicing (Double-Dimensional)
double[,] slice2D = doubleDimArray.Slice(0, 2, 0, 2);
printd(slice2D[0, 0]);
printd(slice2D[1, 1]);

prints("END: Array Slicing Test");


prints("Start: Statistical Features Test");
// Test for Statistical Features
sumVal = sum(singleDimArray);
minVal = min(singleDimArray);
maxVal = max(singleDimArray);
avgVal = avg(singleDimArray);
printd(sumVal);
printd(minVal);
printd(maxVal);
printd(avgVal);

prints("END: Statistical Features Test");

prints("Start: Arithmetic Features Test");

// Test for Arithmetic Features
double[] Arr1 = new double[3];
Arr1[0] = 1.0;
Arr1[1] = 2.0;
Arr1[2] = 3.0;
double[] Arr2 = new double[3];
Arr2[0] = 1.0;
Arr2[1] = 2.0;
Arr2[2] = 3.0;
double[] Arr3 = Arr1 + Arr2; // Addition
double[] Arr4 = Arr1 - Arr2; 
double[,] Arr5 = Arr1 * Arr2; 
dotProd = Arr1 .. Arr2;
printd(Arr3[1]); // Expected output: {5.0}
printd(Arr4[1]); // Expected output: {5.0}
printd(Arr5[0, 0]); // Expected output: {5.0}
printd(dotProd); // Expected output: {5.0}

prints("END: Arithmetic Features Test");


prints("Start: Serialization Test");
double[] myArray = new double[5];
myArray[0] = 1.0;
myArray[1] = 2.0;
myArray[2] = 3.0;
myArray[3] = 4.0;
myArray[4] = 5.0;

// Serialize the array
json = Serialize(myArray);
prints(json);

// Deserialize into a new array
Deserialize(newArray, json);

// Print elements of the new array
printd(newArray[0]);
printd(newArray[4]);

prints("END: Serialization Test");

prints("Start: Views Test");

double[,] matrix = new double[3,3];
matrix[0,0] = 1.1;
matrix[0,1] = 1.2; 
matrix[0,2] = 1.3;
matrix[1,0] = 2.1;
matrix[1,1] = 2.2; 
matrix[1,2] = 2.3;
matrix[2,0] = 3.1; 
matrix[2,1] = 3.2; 
matrix[2,2] = 3.3;

arrayView = matrix.View(0,2,0,2);
arrayView[1,1] = 5.5;

printd(matrix[1,1]);
printd(arrayView[1,1]);

prints("End: Views Test");


prints("Start: Array Destructuring Test");

double[] arr = new double[4];
arr[0] = 1.1;
arr[1] = 2.2;
arr[2] = 3.3;
arr[3] = 4.4;

[a, b, c, d] = arr;

printd(a);
printd(b);
printd(c);
printd(d);

prints("End: Array Destructuring Test");

prints("start:  Custom Iterator Test");
// Create an array
double[] arr = new double[5];
arr[0] = 1.0;
arr[1] = 2.0;
arr[2] = 3.0;
arr[3] = 4.0;
arr[4] = 5.0;

// Create an iterator
it = Iterator(arr);

// Use the iterator to sum the array elements
sum = 0.0;
while (it.hasNext()) {
    sum = sum + it.next();
}

// Print the sum
printd(sum);

prints("End: Custom Iterator Test");
