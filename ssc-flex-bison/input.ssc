// Test for Single-Dimensional Arrays
double[] singleDimArray = new double[5];
singleDimArray[0] = 1.1;
singleDimArray[1] = 2.2;
singleDimArray[2] = 3.3;
singleDimArray[3] = 4.4;
singleDimArray[4] = 5.5;
printd(singleDimArray[0]);

prints("Starting 2D Array Tests.");

// Declaration of a double-dimensional array
double[,] doubleDimArray = new double[5, 5]; // 5x5 matrix of doubles

// Accessing elements
doubleDimArray[0, 0] = 1.23;
value = doubleDimArray[0, 0];
printd(value);

// Test for Double-Dimensional Arrays
double[,] doubleDimArray = new double[3, 3];
doubleDimArray[0, 0] = 1.1;
doubleDimArray[1, 1] = 2.2;
doubleDimArray[2, 2] = 3.3;
value = doubleDimArray[0, 0] + doubleDimArray[2, 2];
printd(value);

prints("2D Array Tests Complete.");

// Test for Dynamic Resizing
DynamicArray<double> dynamicArray = new DynamicArray<double>();
dynamicArray.Add(1.1);
dynamicArray.Add(2.2);
dynamicArray.Resize(5);
dynamicArray[3] = 4.4;
printd(dynamicArray[1]);

prints("resize Array Tests Complete.");

// Test for Array Slicing (Single-Dimensional)
double[] slice1D = singleDimArray.Slice(1, 3);
printd(slice1D[0]);
printd(slice1D[1]);

// Test for Array Slicing (Double-Dimensional)
double[,] slice2D = doubleDimArray.Slice(0, 2, 0, 2);
printd(slice2D[0, 0]);
printd(slice2D[1, 1]);

prints("END: Array Slicing Test");

// Test for Custom Iterators
CustomIterator iterator = new CustomIterator(singleDimArray);
while (iterator.HasNext()) {
    double value = iterator.Next();
    print(value);
}

// Test for Array Views
ArrayView<double> view = doubleDimArray.View(0 2 0 2); // View a 2x2 sub-matrix
view[0 0] = 9.81; // Modify through the view
print(view[0 0], view[1 1]);

// Test for Array Destructuring
double[] arr = {1.0, 2.0, 3.0, 4.0};
double a = 0.0, b = 0.0, c = 0.0, d = 0.0;
[a, b, c, d] = arr; // Destructuring into variables
print(a, b, c, d);

// Test for Array Serialization and Deserialization
string json = JsonSerializer.Serialize(singleDimArray); // Serialize to JSON
double[] deserializedArray = JsonSerializer.Deserialize<double[]>(json); // Deserialize
print(deserializedArray[0], deserializedArray[4]);

// Test for Arithmetic Features
double[] Arr1 = {1.0, 2.0, 3.0};
double[] Arr2 = {4.0, 5.0, 6.0};
double[] Arr3 = Arr1 + Arr2; // Addition
print(Arr3[0], Arr3[2]); // Expected output: {5.0, 9.0}

// Test for Statistical Features
double sumVal = sum(singleDimArray); // Sum of elements in singleDimArray
double minVal = min(singleDimArray); // Min of elements
double maxVal = max(singleDimArray); // Max of elements
double avgVal = avg(singleDimArray); // Average of elements
print(sumVal, minVal, maxVal, avgVal);

